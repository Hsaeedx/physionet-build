# Example .env file for testing

SECRET_KEY=secret
ALLOWED_HOSTS=[]

# System maintenance mode
#SYSTEM_MAINTENANCE_NO_CHANGES=1
#SYSTEM_MAINTENANCE_NO_UPLOAD=1
#SYSTEM_MAINTENANCE_MESSAGE=PhysioNet is undergoing maintenance, and projects cannot be edited. The site will be back online at 16:00 GMT.

# Credentialing
PAUSE_CREDENTIALING=0
PAUSE_CREDENTIALING_MESSAGE=PhysioNet will not be taking new applications for credentialed access until 4 January 2021. We apologize for the inconvenience.

# GCP
# USED to store ALL the published projects to GCP Buckets and BigQuery
# The delegation email, might be possible to change in the:
#  - GCP console -> IAM & Admin -> Identity & Organization
# The Secret, can be changed under the:
#  - GCP console -> API & Services -> Credentials
# Changing this incorrectly will cause that nothing will be sent to GCP
GOOGLE_APPLICATION_CREDENTIALS=json
GCP_DELEGATION_EMAIL=email
GCP_SECRET_KEY=secret

# AWS
# Used to provide MIMIC through AWS, this will include S3, Redshift, Spark
# Key and key2 are predefined by AWS, can be changed but IT WILL BREAK ALL
# Value and Value2 can be changed in the AWS console under cloud formation.
# IF the value is CHANGED, this will ALSO change the cloud formation URL.
AWS_KEY=secret
AWS_KEY2=secret
AWS_VALUE=secret
AWS_VALUE2=secret
AWS_CLOUD_FORMATION=url

# Datacite
# Used to assign the DOIs
# Changing the password can be done at the settings tab in DataCite website
#   - https://doi.datacite.org/ (For live)
#   - https://doi.test.datacite.org/  (For testing)
# The API uses a base64 encoded string of USERNAME:PASSWORD
#
# IF the password is change renew the key of the changed password
# The "DATACITE_TEST_PREFIX" is left empty to skip tests
DATACITE_PREFIX=DOI prefix
DATACITE_USER=SECRET
DATACITE_PASS=SECRET
DATACITE_TEST_PREFIX=
DATACITE_TEST_USER=SECRET
DATACITE_TEST_PASS=SECRET

# Orcid information
# These variables are required to request / exchange a token from ORCID in a effort to get a users ORCID iD, etc.
# The _TEST_ variables are used by base.py while the variables without _TEST_ are used by staging.py and production.py.
# To obtain valid CLIENT_ID and CLIENT_SECRET values you must register an account or use an account from your
# institution to obtain valid codes.  When doing development work off of base.py, register an account at
# sandbox.orcid.org and when using staging.py or production.py register at orcid.org.  After registering you can go to
# developer tools under your name (when logged in) to get the CLIENT_ID and CLIENT_SECRET.  The scopes of the request
# can be altered with the _SCOPE variable.  These scopes control what you are allowed to do during your interaction with
# the ORCID API.  Scopes such as read-limited and activities/update require member API credentials. Multiple scope
# requests should be separated by a comma: '/read-limited,/activities/update' .  All scopes except 'openid' must start
# with a forward slash.  See: https://info.orcid.org/faq/what-is-an-oauth-scope-and-which-scopes-does-orcid-support/
# for more details.  You will also need to enter the redirect URI in the ORCID developer tools as provided in the
# settings (ORCID_REDIRECT_URI in base / staging / production)

ORCID_CLIENT_ID=SECRET
ORCID_CLIENT_SECRET=SECRET
ORCID_SCOPE='/read-limited,/activities/update'
ORCID_TEST_CLIENT_ID=SECRET
ORCID_TEST_CLIENT_SECRET=SECRET
ORCID_TEST_SCOPE='/authenticate'


# ORCID token exchange guide
# a tutorial can be found here: https://orcid.github.io/orcid-api-tutorial/
# token exchanges on the public API can be made at: pub.sandbox.orcid.org
# and on the member API at api.sandbox.orcid.org
# here is a an example using the public API:

# orcid_object = Orcid.objects.get(user=request.user)
# orcid_rec_id = orcid_object.orcid_id
# orcid_rec_access_token = orcid_object.access_token
# token_sent = {'access_token': orcid_rec_access_token}
# client = OAuth2Session(client_id, token=token_sent)
# protected_url = f'https://pub.sandbox.orcid.org/v3.0/{orcid_rec_id}/record'
# r = client.get(protected_url)

# The response should be 200 and contain an xml document which has a put-code for each item in the users record. For
# example the xml contains:
# <work:work-summary put-code="1184745" path="/0000-0002-8983-9907/work/1184745" visibility="public" display-index="1">\n
# This put-code can then be used to retrieve more information about a given record item (i.e. work in this example).

# work_url = f'https://pub.sandbox.orcid.org/v3.0/{orcid_rec_id}/work/1184745'
# wr = client.get(work_url)

# This will also return 200 and the xml document will contain detailed information about the users work
# (i.e. publication details, etc).